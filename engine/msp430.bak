#lang rosette

(require "implementation-sig.rkt"
         "framework.rkt" 
         "../lib/bv.rkt" 
         "../msp430/regs.rkt" 
         (rename-in "../lib/mem_simple.rkt" [make-memory make-memory/vector] [memory-ref memory-ref/vector] [memory-set! memory-set!/vector] [memory-copy memory-copy/vector])
         (rename-in "../lib/mem_ivmap.rkt"  [make-memory make-memory/intervalmap]))

(define (msp430-state rn hiaddr)
  (state (vector (make-memory/vector rn (mspx-bv 0)) 
                 (make-memory/intervalmap hiaddr (mspx-bv 0)))))

(struct msp430-op op () #:transparent)
(struct mov msp430-op () #:transparent)

(struct msp430-decoded decoded (as ad rsrc rdst imm0 imm1) #:transparent)

(define MAP/REG 0)
(define MAP/MEM 1)

(define TODO (void))

; (define (imm a) (constant a))
; (define (reg r) (ref MAP/REG (constant r)))
; (define (ind r) (ref MAP/MEM (reg r)))
; (define (abs a) (ref MAP/MEM (constant a)))
; (define (idx r i) (ref MAP/MEM (add (constant i) (reg r))))

(define-unit msp430-implementation@
  (import)
  (export implementation^)

  (define (impl-bv i) (mspx-bv i))

  (define (mmap-ref state map a)
    (let ([mmap (vector-ref (state-mmaps state) map)]
          [i (bitvector->integer (bvlshr a (mspx-bv 1)))])
      (match map
        [0 (vector-ref mmap i)]
        [1 (memory-ref mmap i)])))

  (define (mmap-set! state map a val)
    (let ([mmap (vector-ref (state-mmaps state) map)]
          [i (bitvector->integer (bvlshr a (mspx-bv 1)))])
      (match map
        [0 (vector-set! mmap i val)]
        [1 (memory-set! mmap i val)])))

  ; Could potentially be synthesized eventually
  (define (comp-addr as rsrc imm)
    (case as
      [(#b00) (ref MAP/REG (constant rsrc))]
      [(#b01) (ref MAP/MEM (add (ref MAP/REG (constant rsrc)) (constant imm)))]
      [(#b10) (ref MAP/MEM (ref MAP/REG (constant rsrc)))]
      [(#b11) (ref MAP/MEM (ref MAP/REG (constant rsrc)))]))

  (define (read-op state bw as rsrc imm)
    (perform-read (comp-addr as rsrc imm) state))

  (define (write-op state bw as rdst imm dst)
    (perform-write (comp-addr as rdst imm) state dst))

  (define (operator opcode)
    (if (bveq (bvand opcode #x4000) #x4000) (mov) 
        TODO))

  (define (decode-2arg stream) 
    (let ([word (first stream)]
          [stream (rest stream)])
      (define opcode  (bvand word #xf000))
      (define rsrc    (bvlshr (bvand word #x0f00) 8))
      (define rdst    (bvand word #x000f))
      (define as      (extract 5 4 word))
      (define ad      (extract 7 7 word))
      (define bw      (extract 6 6 word))
      ; TODO switch on as/ad to figure out if we need to consume the immediates
      (msp430-decoded (operator opcode) bw as ad rsrc rdst '() '())))

  (define (decode-1arg stream) TODO)

  (define (dispatch op bw sr op1 op2) 
    (match op
      ([mov] op1)
    ))
  (define (dispatch/flags op bw sr op1 op2 dst) 
    (match op
      ([mov] sr)
    ))

  (define (step/read state dec pc-incr)
    (match dec [(msp430-decoded op bw as ad rsrc rdst imm0 imm1)
      (let ([pc (bvadd (mmap-ref state MAP/REG REG/PC) pc-incr)]
            [sr (mmap-ref state MAP/REG REG/SR)]
            [op1 (read-op state bw as rsrc imm0)]
            [op2 (read-op state bw ad rdst imm1)])
        (stepctx pc sr op1 op2 null))]))

  (define (step/exec op bw ctx)
    (match ctx [(stepctx _ sr op1 op2 _)
      (let* ([dst (dispatch op bw sr op1 op2)]
             [sr  (dispatch/flags op bw sr op1 op2 dst)])
        (set-stepctx-dst! dst)
        (set-stepctx-sr! sr))]))

  (define (step/write state dec ctx stuff)
    (match (cons dec ctx) [(cons (msp430-decoded _ bw as _ rsrc rdst _ imm1) (stepctx pc sr _ _ dst)) 
      (begin (perform-write (ref MAP/REG (constant REG/PC) state (stepctx-pc pc)))
             (perform-write (ref MAP/REG (constant REG/SR) state (stepctx-sr sr)))
             (perform-write (ref MAP/REG (constant rsrc)) state stuff)
             (write-op state ad rdst imm1 dst))]))
  )

(define-compound-unit/infer msp430-engine@
  (import) (export implementation^ framework^)
  (link msp430-implementation@ framework@))
(define-values/invoke-unit/infer msp430-engine@)

; Test code

(define instr-stream (cons (mspx-bv #x4001) (void))) ; mov r0, r1
(define state (msp430-state 4 4))
(displayln state)
(perform-write (ref MAP/REG 0) state (mspx-bv 17))
(step state instr-stream)
(displayln state)
